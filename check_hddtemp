#!/usr/bin/env python

# -*- coding: utf-8 -*-
#
#
# check_hddtemp
# Copyright (C) 2011  vint21h.pp.ua
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along
#   with this program; if not, write to the Free Software Foundation, Inc.,
#   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

try:
	import sys
	import os
	from optparse import OptionParser
	import socket
except ImportError, err:
	print "ERROR: Couldn't load module. %s" % (err)
	sys.exit(0)

"""Package versioning
"""

__author__ = "vINT 21h <vint21h@vint21h.pp.ua>"
__version__ = "0.001"

"""Global variables
"""

__port = 7634

"""Check command line parameters supplied and get it
"""

if len(sys.argv) < 5:
	print ("Usage: %s [host] [device] [warning temperature] [critical temperature]" % (sys.argv[0]))
	sys.exit(0)
__host = sys.argv[1]
__device = sys.argv[2]
__warn = int(sys.argv[3])
__crit = int(sys.argv[4])

"""Connect to server and get response
"""

__socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
	__socket.connect((__host, __port))
except Error, err:
	print "ERROR: Couldn't connect to server. %s" % (err)
	sys.exit(0)
__result = __socket.recv(4096)
__socket.close()


"""Search for device and get HDD info from server response
"""

try:
	__result = __result.split('|')
	__pos = __result.index(__device)
except ValueError:
	print "ERROR: Couldn't find device in server response"
	sys.exit()

__model = __result[__pos + 1]
__temperature = int(__result[__pos + 2])
__tscale = __result[__pos + 3]

"""Return device information to nagios
"""

if __temperature > __crit:
	print "CRITICAL: device temperature (%d %s) exceeds critical temperature threshold (%d %s)" % (__temperature, __tscale, __crit, __tscale)
elif __temperature > __warn:
	"WARNING: device temperature (%d %s) exceeds warning temperature threshold (%d %s)" % (__temperature, __tscale, __warn, __tscale)
else:
	print "OK: device is functional and stable (temperature: %d %s)" % (__temperature, __tscale)
