#!/usr/bin/env python

# -*- coding: utf-8 -*-
#
#
# check_hddtemp
# Copyright (C) 2011  vint21h.pp.ua
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along
#   with this program; if not, write to the Free Software Foundation, Inc.,
#   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

try:
    import sys
    from optparse import OptionParser
    import socket
except ImportError, err:
    print "ERROR: Couldn't load module. %s" % (err)
    sys.exit(0)


# versioning
__author__ = "vINT 21h <vint21h@vint21h.pp.ua>"
__version__ = "0.2"


def parsecmdline(args):
    """
    Commandline options arguments parsing
    """
    version = "%%prog %s" % (__version__)
    parser = OptionParser(version=version)
    parser.add_option("-s", "--server", action="store", dest="server",
                                            default="", metavar="SERVER",
                                            help="server address")
    parser.add_option("-p", "--port", action="store", type="int",
                                dest="port", default="7634", metavar="PORT",
                                            help="port number")
    parser.add_option("-d", "--device", action="store", dest="device",
                                            default="", metavar="DEVICE",
                                            help="device name")
    parser.add_option("-w", "--warning", action="store", type="int",
                            dest="warning", default="40", metavar="TEMP",
                                            help="warning temperature")
    parser.add_option("-c", "--critical", action="store", type="int",
                            dest="critical", default="65", metavar="TEMP",
                                            help="critical temperature")

    return parser.parse_args(args)


def getdata(server, port):
    """
    Connect to server and get response
    """
    socket_ = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        socket_.connect((server, port))
    except socket.error, err:
        print "ERROR: Couldn't connect to server. %s" % (err)
        sys.exit(0)
    response = socket_.recv(4096)
    socket_.close()
    return response


def parseresponse(response, device):
    """
    Search for device and get HDD info from server response
    """
    try:
        response = response.split('|')
        position = response.index(device)
    except ValueError:
        print "ERROR: Couldn't find device in server response"
        sys.exit(0)
    return {"hddmodel": response[position + 1],
            "temperature": int(response[position + 2]),
            "tempscale": response[position + 3]
            }


if __name__ == "__main__":
    (OPTIONS, args) = parsecmdline(sys.argv)
    DATA = parseresponse(getdata(OPTIONS.server, OPTIONS.port), OPTIONS.device)

    # returning information to nagios
    if DATA["temperature"] > OPTIONS.critical:
        print "CRITICAL: device temperature (%d %s) exceeds critical temperature threshold (%d %s)" % (DATA["temperature"], DATA["tempscale"], OPTIONS.critical, DATA["tempscale"])
    elif DATA["temperature"] > OPTIONS.warning:
        print "WARNING: device temperature (%d %s) exceeds warning temperature threshold (%d %s)" % (DATA["temperature"], DATA["tempscale"], OPTIONS.warning, DATA["tempscale"])
    else:
        print "OK: device is functional and stable (temperature: %d %s)" % (DATA["temperature"], DATA["tempscale"])
